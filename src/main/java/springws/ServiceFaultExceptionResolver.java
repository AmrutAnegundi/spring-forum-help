
package springws;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Date;

import org.springframework.oxm.Marshaller;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.soap.SoapBody;
import org.springframework.ws.soap.SoapFault;
import org.springframework.ws.soap.SoapMessage;
import org.springframework.ws.soap.server.endpoint.SimpleSoapExceptionResolver;

import springws.model.ObjectFactory;
import springws.model.ServiceFaultCdo;

public class ServiceFaultExceptionResolver extends SimpleSoapExceptionResolver
{
	/** The XML marshaller we were initialized with */
	private Marshaller marshaller;

	/** Need the JAXB object factory for creating the JAXBElement wrappers */
	private ObjectFactory factory = new ObjectFactory();

	/**
	* Set the marshaller handling the service types. Must be set upon
	* initialization.
	* @param marshaller
	*/
	public void setMarshaller(final Marshaller marshaller)
	{
		this.marshaller = marshaller;
	}

	/**
	* Safeul add our fault object to the message soap fault.
	* @param fault
	* @param sf
	*/
	private void createFault(final SoapFault fault, final ServiceFaultCdo sf)
	{
		try {
			this.marshaller.marshal(this.factory.createServiceFault(sf), fault.addFaultDetail().getResult());
		} catch (Exception e1) {
			this.logger.error(e1.getMessage(), e1);
		}
	}

	/**
	* Determine what to do with the exception thrown.
	* @see org.springframework.ws.soap.server.endpoint.Simple SoapExceptionResolver#customizeFault(org.springfra mework.ws.context.MessageContext,
	* java.lang.Object, java.lang.Exception,
	* org.springframework.ws.soap.SoapFault)
	*/
	@Override
	protected void customizeFault(final MessageContext messageContext, final Object endpoint, final Exception ex, final SoapFault fault)
	{
		SoapMessage response = (SoapMessage)messageContext.getResponse();
		SoapBody responseBody = response.getSoapBody();
		// This unique ID helps to locate the exception stack trace saved in the
		// log file

		String faultId = "test-id";

		String faultMsg = "Unable to process the request; please contact support using Reference Id: " + faultId;
		// This new fault is used to replace the fault generated by Spring
		// Framework.
		// faultstring contains no exception info because we don't want to
		// expose
		// our internal code in the SOAP Fault that we're sending back
		SoapFault overrideFault = responseBody.addServerOrReceiverFault(faultMsg, this.getLocale());

		ServiceFaultCdo sf = new ServiceFaultCdo();
		sf.setMessage(faultMsg);
		sf.setDateTime(new Date());
		sf.setReferenceId(faultId);
		// thrown by our services

		// typically thrown within service implementations
		if (ex instanceof SystemException) {
			SystemException se = (SystemException)ex;
			this.logger.error("Intercepted SystemException. Reference ID = " + faultId + " : " + "XXX");
			if (se.getExceptionType() != null) {
				sf.setCode(Integer.parseInt(se.getExceptionType().getValue()));
			}
		}
		// unknown - generate generic response
		else {
			StringWriter sw = new StringWriter();
			PrintWriter w = new PrintWriter(sw);
			ex.printStackTrace(w);
			w.flush();
			this.logger.error("Intercepted unknown exception. Reference ID = " + faultId + " : " + sw.getBuffer().toString());
			sf.setCode(Integer.parseInt("1000"));
		}

		this.createFault(overrideFault, sf);
	}

}
